openapi: 3.0.3
info:
  title: Car Sales
  description: Car Sales API
  contact:
    email: sbc.mfreitas@outlook.com
  version: 1.0.0
servers:
- url: http://localhost:8080/v1
tags:
- name: car
  description: Car
- name: order
  description: Order 
- name: client
  description: Clien
paths:
  /v1/car:
    get:
      tags:
        - Car
      summary: Return a list of cars
      description: Return a list of cars
      operationId: getCarsUsingGET
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
        - Car
      summary: Update an existing car
      description: Update an existing car
      operationId: updateCarUsingPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarResponse'
        '201':
          description: Created
        '202':
          description: Accept
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CarResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: Internal server Error
    post:
      tags:
        - Car
      summary: Create new Car
      description: Create new Car
      operationId: createCarUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarResponse'
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CarResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server Error
  '/v1/car/{id}':
    get:
      tags:
        - Car
      summary: Find car by ID
      description: Find the car by ID
      operationId: findCarByIdUsingGET
      parameters:
        - name: id
          in: path
          description: ID of car to return
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CarResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: Internal server Error
    delete:
      tags:
        - Car
      summary: Delete a car
      description: Delete a car
      operationId: deleteCarUsingDELETE
      parameters:
        - name: id
          in: path
          description: Car id to delete
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: Internal server Error
  /v1/client:
    get:
      tags:
        - Client
      summary: Get clients
      operationId: getClientsUsingGET
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: Internal server Error
    put:
      tags:
        - Client
      summary: Updated client
      description: Updated client.
      operationId: updateClientUsingPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '201':
          description: Created
        '202':
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: Internal server Error
    post:
      tags:
        - Client
      summary: Create client
      description: Create the client.
      operationId: createClientUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server Error
  '/v1/client/{id}':
    get:
      tags:
        - Client
      summary: Get client by id
      operationId: getClientByidUsingGET
      parameters:
        - name: id
          in: path
          description: Get client by id
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: Internal server Error
    delete:
      tags:
        - Client
      summary: Delete client
      description: Delete client.
      operationId: deleteClientUsingDELETE
      parameters:
        - name: id
          in: path
          description: The id of object to delete
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: Internal server Error
  /v1/order:
    get:
      tags:
        - Order
      summary: Get orders
      operationId: getOrdersUsingGET
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: Internal server Error
    put:
      tags:
        - Order
      summary: Updated order
      description: Updated order.
      operationId: updateOrderUsingPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '201':
          description: Created
        '202':
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: Internal server Error
    post:
      tags:
        - Order
      summary: Create order
      description: Create the order.
      operationId: createOrderUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server Error
  '/v1/order/{id}':
    get:
      tags:
        - Order
      summary: Get order by id
      operationId: getOrderByidUsingGET
      parameters:
        - name: id
          in: path
          description: Get order by id
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: Internal server Error
    delete:
      tags:
        - Order
      summary: Delete order
      description: Delete order.
      operationId: deleteOrderUsingDELETE
      parameters:
        - name: id
          in: path
          description: The id of object to delete
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '500':
          description: Internal server Error
components:
  schemas:
    BrandResponse:
      title: BrandResponse
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    CarRequest:
      title: CarRequest
      required:
        - brandId
        - id
        - optionIds
        - value
      type: object
      properties:
        brandId:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        optionIds:
          type: array
          items:
            type: integer
            format: int64
        value:
          type: number
          format: bigdecimal
    CarResponse:
      title: CarResponse
      required:
        - id
        - options
        - value
      type: object
      properties:
        brand:
          $ref: '#/components/schemas/BrandResponse'
        id:
          type: integer
          format: int64
        options:
          type: array
          items:
            $ref: '#/components/schemas/OptionResponse'
        value:
          type: number
          format: bigdecimal
    ClientRequest:
      title: ClientRequest
      required:
        - email
        - firstName
        - id
        - lastName
        - phone
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        id:
          type: integer
          format: int64
        lastName:
          type: string
        phone:
          type: string
    ClientResponse:
      title: ClientResponse
      required:
        - Name
        - email
        - id
        - phone
      type: object
      properties:
        Name:
          type: string
        email:
          type: string
        id:
          type: integer
          format: int64
        phone:
          type: string
    OptionResponse:
      title: OptionResponse
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    OrderRequest:
      title: OrderRequest
      required:
        - CarId
        - ClientId
        - id
        - orderDate
        - status
        - value
      type: object
      properties:
        CarId:
          type: integer
          format: int64
        ClientId:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        orderDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - canceled
            - delivered
            - paid
            - placed
        value:
          type: number
          format: bigdecimal
    OrderResponse:
      title: OrderResponse
      required:
        - car
        - client
        - id
        - orderDate
        - status
        - value
      type: object
      properties:
        car:
          $ref: '#/components/schemas/CarResponse'
        client:
          $ref: '#/components/schemas/ClientResponse'
        id:
          type: integer
          format: int64
        orderDate:
          type: string
        status:
          type: string
        value:
          type: number
          format: bigdecimal
